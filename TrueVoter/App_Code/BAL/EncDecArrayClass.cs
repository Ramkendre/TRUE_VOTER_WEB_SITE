using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace TrueVoter.App_Code.BAL
{
    public class EncDecArrayClass
    {
        int[] XValue = { 636, 638, 425, 902, 515, 567, 707, 987, 335, 252, 216, 665, 119, 427, 956, 602, 164, 918, 825, 427, 914, 423, 841, 845, 574, 649, 835, 257, 797, 812, 662, 699, 403, 210, 315, 314, 930, 875, 320, 277, 734, 885, 885, 428, 644, 687, 422, 399, 420, 506, 122, 563, 155, 313, 509, 312, 795, 578, 427, 864, 731, 550, 289, 521, 588, 516, 362, 907, 212, 742, 670, 287, 698, 647, 692, 129, 536, 513, 300, 886, 327, 535, 835, 391, 790, 199, 644, 189, 699, 102, 517, 451, 547, 454, 545, 283, 695, 463, 838, 228, 424, 513, 287, 677, 834, 834, 864, 506, 619, 479, 775, 382, 378, 540, 637, 295, 714, 896, 730, 488, 871, 272, 307, 209, 325, 318, 739, 343, 202, 509, 432, 172, 673, 172, 561, 812, 348, 258, 556, 954, 334, 237, 569, 320, 326, 235, 173, 106, 816, 349, 567, 797, 732, 449, 355, 252, 305, 177, 451, 616, 195, 621, 403, 210, 147, 702, 707, 306, 978, 824, 946, 556, 440, 774, 254, 733, 702, 986, 881, 190, 245, 732, 526, 852, 940, 633, 439, 323, 815, 409, 606, 270, 805, 939, 859, 712, 833, 458, 273, 623, 527, 865, 127, 990, 402, 111, 457, 956, 295, 621, 548, 318, 295, 361, 470, 462, 194, 550, 269, 512, 362, 483, 490, 668, 317, 776, 750, 500, 914, 541, 899, 343, 813, 358, 662, 378, 704, 534, 550, 929, 276, 482, 128, 293, 859, 388, 974, 543, 568, 497, 617, 383, 289, 760, 360, 143, 475, 457, 773, 624, 360, 955, 142, 752, 720, 304, 503, 935, 698, 192, 756, 659, 998, 338, 335, 879, 454, 296, 808, 928, 801, 306, 931, 516, 923, 616, 154, 153, 996, 618, 901, 346, 760, 924, 668, 320, 440, 374, 572, 654, 883, 138, 844, 475, 739, 956, 383, 949, 524, 480, 688, 279, 648, 843, 822, 154, 124, 624, 828, 204, 250, 450, 937, 180, 289, 510, 898, 174, 668, 115, 539, 179, 722, 253, 144, 762, 460, 555, 775, 965, 333, 203, 627, 616, 928, 722, 696, 915, 201, 614, 295, 814, 545, 468, 504, 533, 199, 764, 286, 329, 158, 309, 380, 509, 940, 609, 555, 495, 799, 160, 692, 568, 847, 861, 869, 146, 821, 421, 250, 566, 812, 981, 971, 154, 818, 723, 632, 354, 748, 609, 663, 695, 368, 545, 907, 124, 822, 218, 675, 419, 266, 301, 216, 141, 921, 726, 966, 683, 597, 457, 710, 777, 614, 719, 516, 175, 336, 326, 689, 316, 975, 300, 745, 289, 496, 996, 299, 401, 952, 845, 323, 703, 744, 829, 399, 610, 865, 929, 232, 192, 756, 948, 755, 390, 898, 884, 180, 648, 129, 831, 786, 595, 527, 458, 443, 964, 554, 926, 644, 923, 527, 664, 729, 750, 234, 107, 132, 783, 419, 904, 309, 405, 194, 597, 559, 126, 544, 455, 390, 610, 915, 649, 372, 221, 159, 726, 276, 386, 486, 433, 156, 938, 385, 307, 664, 192, 319, 104, 255, 891, 851, 396, 329, 224, 621, 480, 501, 928, 898, 416, 520, 199, 636, 133, 107, 876, 392, 607, 691, 507, 829, 745, 397, 984, 848, 370, 120, 885, 932, 467, 806, 539, 299, 497, 757, 619, 420, 247, 598, 677, 324, 347, 486, 169, 911, 956, 402, 351, 299, 786, 799, 710, 412, 747, 161, 206, 998, 343, 375, 351, 460, 614, 995, 530, 609, 980, 898, 238, 375, 487, 556, 244, 109, 113, 282, 582, 358, 328, 173, 890, 967, 767, 685, 245, 667, 195, 226, 551, 436, 651, 620, 177, 871, 346, 317, 709, 351, 954, 558, 930, 157, 263, 975, 811, 330, 654, 701, 398, 565, 578, 846, 770, 270, 483, 383, 691, 927, 849, 862, 514, 853, 447, 801, 722, 866, 479, 371, 761, 794, 571, 331, 403, 768, 242, 833, 803, 791, 873, 914, 112, 493, 826, 984, 856, 804, 849, 905, 488, 962, 625, 780, 500, 192, 143, 176, 709, 461, 352, 944, 850, 383, 938, 602, 992, 347, 543, 101, 128, 649, 578, 898, 154, 934, 850, 121, 127, 461, 943, 917, 116, 572, 882, 797, 269, 790, 829, 310, 725, 165, 224, 441, 539, 927, 163, 728, 553, 323, 991, 609, 360, 847, 877, 837, 483, 726, 726, 565, 340, 122, 149, 347, 517, 433, 927, 378, 499, 241, 433, 302, 516, 332, 375, 961, 524, 237, 459, 225, 870, 222, 567, 802, 469, 434, 657, 268, 693, 144, 413, 542, 163, 364, 969, 702, 116, 875, 923, 206, 100, 784, 328, 411, 889, 789, 193, 128, 572, 915, 412, 346, 366, 600, 694, 218, 554, 345, 876, 183, 775, 759, 683, 455, 826, 890, 238, 252, 362, 671, 944, 648, 312, 352, 225, 185, 892, 255, 911, 679, 340, 628, 694, 777, 730, 167, 275, 562, 669, 850, 248, 769, 997, 840, 429, 339, 201, 872, 584, 997, 650, 940, 765, 899, 970, 763, 133, 114, 474, 608, 324, 398, 433, 297, 841, 246, 164, 905, 723, 759, 715, 675, 581, 510, 522, 274, 649, 471, 922, 884, 983, 120, 669, 912, 128, 399, 862, 793, 805, 965, 133, 261, 187, 160, 625, 848, 436, 800, 998, 283, 275, 294, 248, 824, 382, 974, 458, 354, 477, 795, 214, 661, 190, 589, 624, 303, 728, 519, 269, 541, 383, 370, 199, 757, 725, 553, 587, 520, 883, 672, 837, 848, 472, 738, 709, 788, 871, 844, 629, 152, 940, 608, 416, 110, 851, 471, 170, 597, 535, 422, 220, 916, 631, 556, 899, 903, 195, 490, 199, 828, 486, 936, 469, 803, 957, 365, 288, 450, 878, 834, 431, 882, 888, 216, 600, 773, 952, 188, 904, 354, 483, 989, 984, 561, 551, 919, 316, 914, 838, 804, 693, 481, 744, 800, 665, 103, 239, 612, 152, 585, 282, 718, 717, 700, 989, 337, 127, 515, 955, 225, 950, 106, 584, 844, 444, 496, 951, 906, 351, 137, 148, 373, 611, 173, 241, 949, 237, 188, 549, 596, 634, 440, 136, 419, 171, 763, 371, 383, 570, 314, 892, 800, 958 };

        int[] YValue = { 817, 581, 785, 804, 400, 855, 639, 731, 306, 706, 852, 614, 640, 767, 227, 451, 372, 501, 295, 927, 353, 661, 836, 589, 764, 544, 410, 880, 490, 527, 439, 191, 828, 964, 173, 878, 770, 636, 688, 629, 933, 609, 418, 410, 264, 457, 389, 506, 665, 388, 393, 444, 214, 603, 385, 255, 744, 295, 140, 854, 545, 758, 340, 778, 367, 760, 785, 674, 694, 347, 680, 735, 811, 665, 993, 743, 343, 526, 424, 406, 255, 902, 314, 201, 233, 994, 975, 325, 679, 916, 234, 574, 595, 832, 184, 274, 368, 638, 143, 502, 671, 713, 811, 417, 707, 656, 631, 548, 608, 640, 911, 317, 870, 732, 699, 641, 544, 239, 644, 372, 784, 559, 994, 777, 213, 205, 239, 977, 580, 818, 475, 703, 483, 920, 734, 540, 190, 895, 492, 575, 462, 526, 715, 138, 105, 915, 703, 862, 233, 541, 729, 228, 992, 769, 717, 211, 717, 134, 304, 602, 517, 652, 967, 789, 265, 307, 833, 949, 997, 258, 550, 647, 745, 169, 908, 357, 842, 956, 772, 297, 501, 376, 844, 138, 188, 346, 709, 712, 303, 622, 822, 156, 691, 889, 158, 809, 558, 925, 872, 796, 181, 753, 863, 973, 990, 181, 482, 923, 860, 459, 367, 760, 361, 106, 201, 240, 806, 928, 700, 917, 596, 221, 746, 475, 435, 494, 955, 855, 110, 199, 798, 916, 183, 974, 216, 747, 512, 869, 147, 107, 863, 785, 851, 842, 354, 162, 794, 684, 787, 916, 102, 629, 325, 953, 299, 959, 107, 488, 638, 595, 225, 625, 913, 760, 660, 450, 676, 385, 889, 453, 727, 936, 880, 693, 153, 810, 368, 902, 220, 373, 698, 371, 168, 193, 196, 269, 690, 228, 774, 256, 739, 123, 331, 550, 881, 337, 870, 190, 282, 903, 484, 508, 794, 434, 288, 165, 747, 631, 899, 488, 690, 203, 368, 365, 896, 852, 557, 820, 664, 491, 759, 547, 610, 733, 712, 703, 704, 429, 811, 815, 938, 278, 720, 315, 887, 289, 576, 732, 903, 131, 520, 159, 327, 386, 564, 636, 754, 964, 653, 128, 779, 150, 525, 790, 244, 936, 897, 160, 720, 583, 459, 417, 819, 184, 548, 511, 482, 152, 477, 706, 376, 823, 915, 632, 969, 699, 319, 323, 268, 175, 948, 739, 774, 782, 136, 887, 752, 929, 171, 950, 391, 515, 112, 419, 670, 202, 338, 243, 836, 153, 254, 702, 587, 946, 750, 954, 233, 891, 819, 543, 716, 673, 890, 644, 634, 719, 641, 136, 148, 659, 758, 551, 980, 525, 414, 860, 811, 596, 960, 866, 460, 176, 486, 215, 920, 346, 251, 827, 132, 180, 753, 859, 209, 626, 333, 716, 623, 466, 783, 950, 559, 302, 194, 276, 393, 701, 721, 161, 631, 889, 243, 635, 929, 951, 182, 640, 286, 775, 722, 388, 567, 813, 103, 967, 904, 898, 442, 453, 292, 696, 336, 444, 812, 110, 407, 258, 980, 310, 821, 319, 624, 189, 295, 241, 936, 218, 928, 256, 544, 692, 529, 847, 742, 495, 482, 745, 299, 226, 370, 494, 358, 367, 868, 934, 653, 797, 822, 919, 644, 923, 658, 975, 953, 503, 763, 478, 618, 860, 130, 786, 968, 285, 907, 598, 267, 488, 700, 417, 626, 660, 957, 854, 938, 426, 959, 356, 319, 360, 587, 238, 394, 109, 611, 619, 133, 553, 893, 339, 730, 104, 227, 437, 195, 582, 525, 173, 459, 369, 766, 265, 197, 505, 393, 982, 964, 803, 136, 626, 543, 507, 258, 357, 372, 891, 492, 959, 673, 388, 564, 712, 593, 461, 685, 621, 533, 620, 758, 456, 900, 885, 896, 948, 592, 422, 140, 888, 714, 627, 653, 329, 516, 367, 795, 323, 845, 868, 164, 303, 189, 564, 499, 170, 803, 153, 670, 735, 818, 770, 549, 444, 144, 679, 724, 656, 610, 308, 764, 949, 850, 603, 344, 146, 733, 335, 296, 326, 665, 461, 775, 664, 556, 555, 366, 436, 486, 825, 245, 538, 751, 404, 169, 942, 177, 309, 285, 835, 641, 238, 712, 636, 203, 214, 451, 585, 320, 452, 436, 568, 856, 443, 169, 456, 994, 883, 886, 587, 412, 388, 269, 783, 163, 325, 297, 545, 534, 401, 967, 523, 150, 460, 683, 526, 748, 238, 560, 441, 204, 779, 215, 134, 488, 675, 681, 407, 335, 711, 947, 293, 422, 696, 522, 353, 968, 927, 573, 876, 915, 904, 151, 918, 484, 911, 518, 496, 759, 642, 707, 855, 423, 545, 483, 632, 272, 235, 394, 487, 643, 888, 310, 821, 452, 774, 201, 452, 936, 429, 557, 820, 664, 682, 524, 298, 728, 296, 648, 576, 256, 285, 647, 691, 104, 191, 869, 875, 312, 889, 181, 833, 632, 186, 333, 126, 694, 328, 565, 709, 810, 165, 558, 429, 185, 886, 291, 739, 120, 285, 902, 975, 585, 817, 330, 458, 341, 617, 817, 361, 903, 324, 240, 146, 348, 722, 287, 578, 449, 498, 603, 499, 730, 938, 765, 190, 725, 318, 606, 216, 898, 229, 855, 127, 986, 205, 347, 813, 854, 874, 784, 176, 510, 303, 804, 585, 924, 512, 180, 461, 698, 712, 389, 621, 680, 502, 344, 645, 152, 240, 731, 123, 110, 700, 462, 774, 467, 213, 159, 243, 475, 472, 722, 574, 712, 526, 988, 526, 234, 279, 264, 313, 237, 245, 517, 285, 838, 334, 445, 583, 859, 700, 761, 714, 242, 761, 165, 808, 840, 130, 217, 811, 452, 935, 984, 325, 988, 814, 907, 254, 513, 817, 511, 871, 974, 518, 884, 863, 283, 276, 934, 233, 766, 575, 383, 773, 710, 108, 432, 950, 460, 279, 685, 204, 162, 452, 860, 300, 259, 291, 296, 124, 426, 291, 170, 141, 289, 888, 738, 723, 875, 301, 625, 663, 194, 983, 144, 876, 652, 311, 613, 980, 482, 956, 792, 333, 231, 407, 809, 622, 657, 683, 703, 990, 979, 909, 806, 575, 505, 341, 584, 821, 368, 708, 174, 259, 652, 121, 109, 178, 407, 982, 647, 947, 677, 314, 640, 468, 497, 835, 909, 880, 179, 216 };

        int[] ZValue = { 220, 462, 257, 129, 592, 295, 138, 969, 656, 395, 296, 763, 911, 361, 874, 889, 184, 650, 930, 497, 636, 215, 921, 723, 530, 233, 130, 959, 274, 362, 852, 598, 322, 454, 800, 386, 142, 145, 210, 528, 462, 614, 899, 942, 825, 932, 234, 802, 936, 248, 237, 450, 708, 351, 870, 104, 539, 532, 597, 459, 264, 177, 794, 394, 542, 696, 541, 557, 560, 587, 846, 139, 540, 501, 134, 122, 315, 978, 897, 597, 997, 327, 123, 126, 225, 502, 889, 969, 582, 795, 846, 608, 546, 750, 364, 385, 819, 605, 500, 229, 490, 675, 341, 448, 400, 197, 908, 306, 316, 848, 788, 560, 634, 100, 460, 935, 153, 767, 268, 140, 805, 570, 974, 763, 739, 338, 591, 788, 237, 748, 302, 708, 577, 768, 206, 422, 984, 673, 724, 127, 592, 683, 753, 733, 106, 385, 973, 546, 389, 427, 332, 151, 436, 460, 422, 918, 700, 576, 708, 162, 605, 219, 169, 567, 646, 180, 981, 864, 892, 138, 949, 478, 143, 241, 546, 222, 816, 341, 756, 454, 363, 144, 499, 808, 516, 250, 371, 217, 445, 287, 720, 508, 964, 662, 521, 472, 613, 286, 186, 925, 402, 208, 653, 351, 476, 852, 108, 295, 912, 300, 202, 459, 818, 354, 797, 560, 719, 359, 150, 495, 807, 863, 519, 705, 416, 541, 512, 479, 719, 174, 607, 629, 254, 830, 151, 255, 490, 247, 431, 662, 242, 175, 304, 245, 184, 361, 688, 710, 863, 959, 751, 353, 235, 690, 217, 538, 688, 946, 933, 933, 440, 627, 575, 837, 692, 572, 304, 987, 303, 642, 169, 572, 927, 487, 353, 732, 659, 374, 620, 155, 852, 800, 615, 758, 422, 353, 493, 563, 712, 611, 566, 543, 312, 496, 322, 614, 599, 466, 552, 610, 156, 699, 507, 320, 890, 279, 425, 747, 436, 484, 877, 414, 425, 877, 181, 638, 111, 816, 515, 438, 178, 740, 375, 690, 176, 625, 359, 530, 265, 738, 233, 293, 820, 110, 998, 253, 393, 395, 866, 242, 926, 745, 226, 328, 733, 251, 217, 434, 415, 683, 602, 781, 949, 213, 532, 414, 424, 816, 243, 365, 918, 894, 581, 697, 351, 684, 592, 415, 878, 927, 345, 715, 949, 372, 510, 432, 613, 147, 955, 923, 507, 924, 214, 581, 235, 450, 342, 707, 577, 684, 827, 575, 251, 601, 322, 132, 263, 528, 975, 148, 658, 800, 555, 487, 437, 886, 831, 676, 702, 199, 799, 377, 859, 319, 856, 993, 780, 100, 561, 899, 442, 884, 837, 293, 199, 768, 564, 447, 150, 478, 268, 185, 170, 907, 365, 706, 468, 726, 243, 348, 618, 664, 105, 477, 883, 550, 714, 931, 743, 327, 351, 263, 965, 175, 705, 773, 961, 361, 388, 668, 422, 483, 626, 323, 929, 714, 306, 951, 952, 249, 624, 154, 856, 313, 381, 776, 878, 460, 409, 648, 154, 632, 702, 821, 227, 105, 218, 993, 302, 590, 743, 207, 438, 574, 925, 234, 138, 780, 546, 268, 343, 762, 977, 593, 701, 296, 406, 752, 793, 927, 893, 601, 950, 738, 613, 788, 779, 804, 196, 924, 595, 312, 748, 461, 505, 517, 715, 381, 386, 246, 738, 198, 912, 241, 405, 391, 653, 209, 219, 929, 698, 465, 300, 373, 696, 242, 256, 698, 959, 236, 454, 332, 684, 621, 671, 130, 113, 615, 188, 284, 580, 124, 465, 646, 288, 795, 687, 808, 433, 322, 234, 670, 685, 265, 325, 230, 111, 475, 764, 362, 360, 116, 421, 250, 791, 505, 512, 391, 568, 374, 377, 138, 120, 933, 448, 674, 998, 653, 184, 900, 553, 446, 364, 736, 101, 782, 646, 518, 396, 541, 119, 637, 849, 824, 922, 564, 702, 315, 853, 781, 382, 396, 340, 159, 944, 196, 650, 750, 816, 650, 231, 456, 390, 862, 807, 913, 751, 683, 248, 109, 858, 992, 994, 127, 354, 739, 287, 294, 110, 883, 970, 783, 799, 401, 618, 257, 206, 305, 791, 904, 232, 895, 701, 744, 409, 661, 347, 985, 117, 109, 811, 119, 166, 843, 922, 388, 400, 312, 803, 304, 907, 455, 739, 931, 678, 446, 656, 987, 344, 649, 806, 546, 890, 343, 875, 962, 391, 349, 716, 692, 492, 301, 277, 100, 171, 951, 716, 954, 478, 329, 856, 892, 500, 587, 996, 775, 255, 768, 166, 961, 104, 358, 741, 466, 302, 365, 227, 822, 966, 959, 996, 151, 594, 211, 810, 706, 278, 738, 860, 725, 729, 700, 608, 114, 792, 912, 146, 403, 346, 200, 806, 621, 282, 753, 687, 233, 558, 809, 797, 804, 824, 893, 986, 518, 332, 804, 398, 388, 775, 389, 596, 516, 907, 440, 332, 403, 749, 726, 672, 388, 319, 823, 575, 866, 252, 475, 867, 839, 523, 676, 247, 467, 939, 155, 899, 835, 713, 190, 781, 987, 614, 756, 626, 955, 602, 390, 712, 841, 521, 384, 483, 831, 237, 509, 585, 101, 417, 220, 365, 856, 935, 557, 863, 198, 242, 229, 575, 851, 539, 496, 688, 658, 943, 684, 772, 561, 296, 619, 363, 861, 761, 126, 418, 239, 293, 415, 330, 530, 569, 898, 517, 592, 823, 924, 151, 157, 892, 527, 813, 473, 814, 859, 401, 125, 694, 824, 886, 551, 735, 123, 803, 797, 855, 503, 194, 909, 238, 724, 904, 826, 897, 144, 382, 639, 977, 196, 833, 119, 633, 715, 668, 767, 805, 888, 146, 900, 724, 392, 544, 468, 527, 777, 793, 546, 195, 719, 735, 420, 829, 241, 917, 267, 622, 985, 575, 769, 577, 760, 147, 597, 989, 867, 917, 120, 453, 135, 990, 965, 457, 292, 284, 845, 280, 536, 398, 220, 349, 834, 544, 357, 459, 513, 288, 492, 797, 500, 245, 818, 413, 375, 423, 962, 345, 945, 477, 659, 858, 773, 192, 159, 728, 768, 962, 637, 955, 172, 986, 186, 687, 454, 519, 741, 316, 789, 238, 575, 678, 525, 322, 952, 889, 272, 652, 181, 868, 321, 599, 333, 158, 738, 360, 575, 741, 484, 627, 689, 550, 650, 535, 724 };

        public string DecryptInteger(string value, string position)
        {
            string fisrtPos = "";
            string secPos = "";
            string thirdPos = "";
            
            try
            {
                fisrtPos = position.Substring(1, 3);
                secPos = position.Substring(4, 3);
                thirdPos = position.Substring(7, 3);
            }
            catch
            {
                fisrtPos = position.Substring(0, 3);
                secPos = position.Substring(3, 3);
                thirdPos = position.Substring(6, 3);
            }

            string dt1 = value.Substring(value.Length - 10);
            value = value.Substring(0, value.Length - 10);
            string retVal = DateTimeDec(dt1);

            if (retVal == "0")
            {
                Exception exceptionValue = new Exception();
                throw exceptionValue;
                //return retMobile;
            }
            else
            {
                long mob = Convert.ToInt64(value);
                int posKeyX = Convert.ToInt32(fisrtPos);
                int xIndexV = Convert.ToInt32(XValue.GetValue(posKeyX));
                int posKeyY = Convert.ToInt32(secPos);
                int yIndexV = Convert.ToInt32(YValue.GetValue(posKeyY));
                int posKeyZ = Convert.ToInt32(thirdPos);
                int zIndexV = Convert.ToInt32(ZValue.GetValue(posKeyZ));

                mob = mob / 7;
                mob = mob - zIndexV;
                mob = mob / 5;
                mob = mob + yIndexV;
                mob = mob / 3;
                mob = mob - xIndexV;
                mob = mob / 8;

                return Convert.ToString(mob);
            }
        }

        public string returnCurDate()
        {
            TimeZoneInfo INDIAN_ZONE = TimeZoneInfo.FindSystemTimeZoneById("India Standard Time");
            DateTime indianTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("India Standard Time"));
            string dt = indianTime.ToString("yyyy-MM-dd HH:mm");
            return dt;
        }

        public string DateTimeDec(string dateTimeEnc)
        {
            try
            {
                string retVal = "0";
                string dayVal = dateTimeEnc.Substring(0, 2);
                string monVal = dateTimeEnc.Substring(2, 2);
                string yeVal = dateTimeEnc.Substring(4, 2);
                string hrVal = dateTimeEnc.Substring(6, 2);
                string minVal = dateTimeEnc.Substring(8, 2);

                string dateTime = returnCurDate();//System.DateTime.Now.ToString("yyyy-MM-dd HH:MM");
                string[] Value1 = dateTime.Split(' ');
                string[] dateVal = Value1[0].Split('-');
                string[] timeVal = Value1[1].Split(':');

                string curyeVal = dateVal[0].Substring(dateVal[0].Length - 2);
                string curmonVal = dateVal[1].ToString();
                string curdayVal = dateVal[2].ToString();
                string curhrVal = timeVal[0].ToString();
                string curminVal = timeVal[1].ToString();

                if (curyeVal == yeVal && curmonVal == monVal && curdayVal == dayVal && curhrVal == hrVal)
                {
                    int diff = Convert.ToInt32(curminVal) - Convert.ToInt32(minVal);
                    diff = System.Math.Abs(diff);

                    if (diff <= 25)//if (diff <= 2)
                    {
                        retVal = "1";
                    }
                    else
                    {
                        retVal = "0";
                    }
                }
                return retVal;
            }
            catch
            {
                return "0";
            }
        }

        public string DateTimeEnc()
        {
            try
            {
                string dateTime = returnCurDate();//System.DateTime.Now.ToString("yyyy-MM-dd HH:MM");
                string[] Value1 = dateTime.Split(' ');
                string[] dateVal = Value1[0].Split('-');
                string[] timeVal = Value1[1].Split(':');

                string yeVal = dateVal[0].Substring(dateVal[0].Length - 2);
                string monVal = dateVal[1].ToString();
                string dayVal = dateVal[2].ToString();

                string hrVal = timeVal[0].ToString();
                string minVal = timeVal[1].ToString();

                string year = yeVal;
                string month = monVal;
                string day = dayVal;
                string hour = hrVal;
                string min = minVal;

                dateTime = day + month + year + hour + min;

                return dateTime;
            }
            catch
            {
                return "1210161219";
            }
        }

        public string EncryptInteger(string value)
        {
            long mob = Convert.ToInt64(value);
            Random rnd = new Random();
            string finalPos = "";
            int r = rnd.Next(999);
            int posKeyX = Convert.ToInt32(r);
            int xIndexV = Convert.ToInt32(XValue.GetValue(posKeyX));

            r = rnd.Next(999);
            int posKeyY = Convert.ToInt32(r);
            int yIndexV = Convert.ToInt32(YValue.GetValue(posKeyY));

            r = rnd.Next(999);
            int posKeyZ = Convert.ToInt32(r);
            int zIndexV = Convert.ToInt32(ZValue.GetValue(posKeyZ));

            mob = mob * 8;
            mob = mob + xIndexV;
            mob = mob * 3;
            mob = mob - yIndexV;
            mob = mob * 5;
            mob = mob + zIndexV;
            mob = mob * 7;

            string fisrtPos = Convert.ToString(posKeyX);
            string secPos = Convert.ToString(posKeyY);
            string thirdPos = Convert.ToString(posKeyZ);

            if (fisrtPos.Length == 1)
            {
                fisrtPos = "00" + fisrtPos;
            }
            if (secPos.Length == 1)
            {
                secPos = "00" + secPos;
            }
            if (thirdPos.Length == 1)
            {
                thirdPos = "00" + thirdPos;
            }

            if (fisrtPos.Length == 2)
            {
                fisrtPos = "0" + fisrtPos;
            }
            if (secPos.Length == 2)
            {
                secPos = "0" + Convert.ToString(posKeyY);
            }
            if (thirdPos.Length == 2)
            {
                thirdPos = "0" + thirdPos;
            }

            finalPos = fisrtPos + secPos + thirdPos;
            string dateTime = DateTimeEnc();
            return Convert.ToString(mob + dateTime + "$" + finalPos);
        }
    }
}